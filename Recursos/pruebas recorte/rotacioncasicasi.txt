
function rotatePoint(pivot, point, angle) {
  // Rotate clockwise, angle in radians
  var x = Math.round((Math.cos(angle* Math.PI / 180;) * (point[0] - pivot[0])) -
                     (Math.sin(angle* Math.PI / 180;) * (point[1] - pivot[1])) +
                     pivot[0]),
      y = Math.round((Math.sin(angle* Math.PI / 180;) * (point[0] - pivot[0])) +
                     (Math.cos(angle* Math.PI / 180;) * (point[1] - pivot[1])) +
                     pivot[1]);
  return [x, y];
};

let src = cv.imread('canvasInput');
 let dst = new cv.Mat();
 let test = cv.imread('canvasInput');


    cv.threshold(src, dst, 180, 255, cv.THRESH_BINARY);
    cv.cvtColor(dst, dst, cv.COLOR_RGBA2GRAY, 0);
    let contours = new cv.MatVector();
    let hierarchy = new cv.Mat();
    cv.findContours(dst, contours, hierarchy, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_SIMPLE);
    let areaMax=0;
    let indexMax=0;
    let area=-1;
    for (let i = 0; i < contours.size(); ++i) {
      let cnt = contours.get(i);
      area = cv.contourArea(cnt)
      if(area>areaMax){
      areaMax=area;
      indexMax=i;
      }
    }
   

    let cntFinal = contours.get(indexMax);
   let rotatedRect = cv.minAreaRect(cntFinal );
let vertices = cv.RotatedRect.points(rotatedRect);
console.log(vertices)
angleDeg = Math.atan2(vertices[0].y - vertices[1].y, vertices[0].x - vertices[1].x) * 180 / Math.PI;
console.log(angleDeg);
let center = new cv.Point(src.cols / 2, src.rows / 2);
let dsize = new cv.Size(src.cols, src.rows);
let M = cv.getRotationMatrix2D(center, angleDeg, 1);
cv.warpAffine(test, test, M, dsize, cv.INTER_LINEAR, cv.BORDER_CONSTANT, new cv.Scalar());
let rect = new cv.Rect(vertices[0].y, vertices[0].x, 200, 200);
console.log(
    //let final=src.roi(rectFinal);
cv.imshow('canvasOutput', test);
src.delete(); dst.delete(); hierarchy.delete(); contours.delete(); 